(window.webpackJsonp=window.webpackJsonp||[]).push([[49],{598:function(t,a,s){"use strict";s.r(a);var n=s(31),r=Object(n.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("p",[s("big",[t._v("作者：chenglNG(yuanchenglang)")])],1),t._v(" "),s("p",[s("big",[t._v("日期：2021年2月10号")])],1),t._v(" "),s("h1",{attrs:{id:"源计划"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#源计划"}},[t._v("#")]),t._v(" 源计划")]),t._v(" "),s("h2",{attrs:{id:"javascript"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#javascript"}},[t._v("#")]),t._v(" javascript")]),t._v(" "),s("h3",{attrs:{id:"基础"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#基础"}},[t._v("#")]),t._v(" 基础")]),t._v(" "),s("h3",{attrs:{id:"谈谈你对原型链的理解？-✨"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#谈谈你对原型链的理解？-✨"}},[t._v("#")]),t._v(" 谈谈你对原型链的理解？ ✨")]),t._v(" "),s("p",[t._v("原型是一个对象或者类实例的一个数据共享区。访问对象或者类实例的属性或方法时，先查找自身的属性或方法，如果找不到，继续查找原型。例如函数的portotype就是原型属性。")]),t._v(" "),s("p",[t._v("原型中保存着着另一个原型的引用，另一个原型又保存着另一个原型的引用，像这样的引用关系就叫做原型链。访问对象或者类实例的属性或方法时，先查找自身的属性或方法，如果找不到，继续查找原型，如果还找不到，继续查找下一个原型，直到结束，如果还找不到，返回undefind。对象或类实例通过继承实方式现原型链，能够复用父类对象，实例中的属性和方法。\n我们还可以 通过hasOwnProperty判断属性是否在原型上，true表示不在。")]),t._v(" "),s("h3",{attrs:{id:"如何判断是否是数组？"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#如何判断是否是数组？"}},[t._v("#")]),t._v(" 如何判断是否是数组？")]),t._v(" "),s("p",[t._v("Array.isArray、instance of Array")]),t._v(" "),s("h3",{attrs:{id:"es6模块与commonjs模块有什么区别？"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#es6模块与commonjs模块有什么区别？"}},[t._v("#")]),t._v(" ES6模块与CommonJS模块有什么区别？")]),t._v(" "),s("p",[t._v("同步和异步是在于程序中的各个任务是否按顺序执行，异步操作可以改变程序的正常执行顺序。\n"),s("br"),t._v("\n阻塞和非阻塞就是发起调度，会不会挂起当前线程，停止执行代码，直到调度完才继续执行代码。")]),t._v(" "),s("br"),t._v("\n异步加载：不按代码执行顺序加载。\n"),s("br"),t._v("\n同步加载：按照代码的执行顺序加载，什么时候执行代码发起调度就什么时候调度。\n"),s("h4",{attrs:{id:"amd"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#amd"}},[t._v("#")]),t._v(" AMD:")]),t._v(" "),s("p",[t._v("异步加载模块，不阻塞html等其他资源的加载（不阻塞线程），回调函数遵循时间循环（不一定按顺序执行）")]),t._v(" "),s("h4",{attrs:{id:"commonjs"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#commonjs"}},[t._v("#")]),t._v(" CommonJS")]),t._v(" "),s("p",[t._v("1.单例模式\n2.同步加载，按顺序执行代码，同时会阻塞当前代码执行（挂起当前线程）\n3. 当有导入的时候（import或require）,都会暂停当前模块执行的代码，并产生一些奇妙的效果。（export fn,函数声明）（node环境）")]),t._v(" "),s("h4",{attrs:{id:"es6"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#es6"}},[t._v("#")]),t._v(" es6:")]),t._v(" "),s("p",[t._v("1.单例模式\n2.异步加载（挂起当前线程，先加载执行，之后再执行当前代码），不按顺序执行代码（异步），会挂起当前线程（阻塞）\n3.当有导入的时候（import或require）,都会暂停当前模块执行的代码，并产生一些奇妙的效果。（export fn,函数声明）（浏览器环境）\n4. 不能重新赋值")]),t._v(" "),s("h4",{attrs:{id:"相同："}},[s("a",{staticClass:"header-anchor",attrs:{href:"#相同："}},[t._v("#")]),t._v(" 相同：")]),t._v(" "),s("p",[t._v("都是单例模式，创建过的实例会被缓存。\n当有导入的时候（import或require）,都会暂停当前模块执行的代码，并产生一些奇妙的效果。（export fn,函数声明）")]),t._v(" "),s("h4",{attrs:{id:"不同："}},[s("a",{staticClass:"header-anchor",attrs:{href:"#不同："}},[t._v("#")]),t._v(" 不同：")]),t._v(" "),s("p",[t._v("CommonJS先require同步加载（require时才加载执行，有一定的阻塞,更适合服务器，读取文件无需请求下载)，ES6异步加载（先加载执行完所有模块，再来执行当前代码（当前代码的函数声明会比加载模块靠前完成），适合浏览器）\ncommonJS使用的module.exports导出（对象是浅拷贝），es6采用export default等语法导出，导出的对象是直接引用。\nes6 导出的对象不能重新赋值（会报错），commonjs不会.")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("聊⼀聊如何在JavaScript中实现不可变对象？")])]),t._v(" "),s("li",[s("p",[t._v("JavaScript的参数是按照什么⽅式传递的？")])]),t._v(" "),s("li",[s("p",[t._v("js有哪些类型?\nnumber,string,null,undefind,boolean")])]),t._v(" "),s("li",[s("p",[t._v("为什么会有BigInt的提案？")])]),t._v(" "),s("li",[s("p",[t._v("null与undefined的区别是什么？\nnull 表示 空值")])])]),t._v(" "),s("p",[t._v("undefind表示 不是空值，表示值不存在")]),t._v(" "),s("h3",{attrs:{id:"_0-1-0-2为什么不等于0-3？"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_0-1-0-2为什么不等于0-3？"}},[t._v("#")]),t._v(" 0.1+0.2为什么不等于0.3？")]),t._v(" "),s("p",[t._v("首先，计算时要将小数的10进制转换为标准机器读懂的编码，在这个过程中，因为位数原因，造成精度会顺损失，导致计算出的结果大于0.3")]),t._v(" "),s("h3",{attrs:{id:"类型转换的规则有哪些？"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#类型转换的规则有哪些？"}},[t._v("#")]),t._v(" 类型转换的规则有哪些？")]),t._v(" "),s("p",[t._v("if语句，while,==，数学运算符")]),t._v(" "),s("h3",{attrs:{id:"类型转换的原理是什么？"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#类型转换的原理是什么？"}},[t._v("#")]),t._v(" 类型转换的原理是什么？")]),t._v(" "),s("p",[t._v('当遇到转换规则时，则在内部代码会判断 值类型，好比如[] + 1,先调用valueOf()方法，发现类型不是原始值类型，接着再调用toString(),最后[]得到 ""转换，相当于""+1,结果为"1"')]),t._v(" "),s("h3",{attrs:{id:"js机制"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#js机制"}},[t._v("#")]),t._v(" js机制")]),t._v(" "),s("h3",{attrs:{id:"解释下变量提升？✨"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#解释下变量提升？✨"}},[t._v("#")]),t._v(" 解释下变量提升？✨")]),t._v(" "),s("p",[t._v("javascript代码在真正执行前会根据词法环境注册var、let、const声明的变量及声明函数。首先会进行函数的声明，给对应的标识符进行函数绑定，若标识符已存在，则覆盖之前的值。然后进行变量的声明。 若该变量（标识符）没注册过，则默认等于undefind。若声明了变量或函数，并在声明变量或函数语句前执行console.log打印变量，如果是变量则打印undefind，如果是函数则打印函数体。但let，const会报错，因为console.log处于暂时性死区。")]),t._v(" "),s("h3",{attrs:{id:"⼀段javascript代码是如何执⾏的？✨"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#⼀段javascript代码是如何执⾏的？✨"}},[t._v("#")]),t._v(" ⼀段JavaScript代码是如何执⾏的？✨")]),t._v(" "),s("p",[t._v("javascript是逐行执行的，执行的时候，首先会创建一个全局执行上下文，执行上下文里有词法环境，函数上下文等执行所需的变量，当遇到一个执行函数时，引擎会停止当前执行上下文的执行，创建一个函数执行上下文，并，压入执行栈，执行栈是用来管理跟踪当前执行上下文的位置，保存着全局执行上下文和所有的函数执行上下文，当函数执行完毕时，函数执行上下文弹出执行栈，相关的作用域等数据也随之回收，继续执行全局执行上下文。当前执行全局代码相当于执行宏任务，如果遇到宏任务，则把宏任务放到宏任务队列，等待下一次时间循环，如果是微任务，则放到微任务队列，等待在下一次宏任务执行前全部执行完毕。")]),t._v(" "),s("h3",{attrs:{id:"javascript的作⽤域链理解吗？✨"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#javascript的作⽤域链理解吗？✨"}},[t._v("#")]),t._v(" JavaScript的作⽤域链理解吗？✨")]),t._v(" "),s("p",[t._v("作用域就是在函数执行上下文中用于查找变量或函数。作用域又称词法环境，当函数执行时，就会生成，用于跟踪函数中声明的变量和函数。let、const声明的变量保存在块级作用域，var声明的变量放在名为local作用域。作用作用域有可能引用着父级作用域。")]),t._v(" "),s("h3",{attrs:{id:"谈⼀谈你对this的了解？✨"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#谈⼀谈你对this的了解？✨"}},[t._v("#")]),t._v(" 谈⼀谈你对this的了解？✨")]),t._v(" "),s("p",[t._v("this指的函数上下文，和函数执行上下文不是一个东西。this相当于一个动态的作用域，函数中，this可以是指向一个对象或全局对象window，或者undefind。通过call，bind，apply可以修改函数this的指向，严格模式下，this为undefind，在箭头函数中，this指向箭头函数所在执行上下文的函数上下文。")]),t._v(" "),s("h3",{attrs:{id:"箭头函数的this指向哪⾥？✨"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#箭头函数的this指向哪⾥？✨"}},[t._v("#")]),t._v(" 箭头函数的this指向哪⾥？✨")]),t._v(" "),s("p",[t._v("this指向箭头函数所在执行上下文的函数上下文")]),t._v(" "),s("h3",{attrs:{id:"理解闭包吗？✨"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#理解闭包吗？✨"}},[t._v("#")]),t._v(" 理解闭包吗？✨")]),t._v(" "),s("p",[t._v("闭包就是作用域的特殊应用（个人感觉差别不大）。在外部函数内声明内部函数时，闭包就创建了。闭包保存着内部函数所需要变量或函数（内部函数作用域没有的），并存在于作用域链上。只要有函数引用着闭包就不会消失（可能会引起内存泄漏问题），请不要多度使用闭包，或者清空无用的函数。（let fn = null）")]),t._v(" "),s("h3",{attrs:{id:"实现bind和call两个方法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#实现bind和call两个方法"}},[t._v("#")]),t._v(" 实现bind和call两个方法")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[t._v("\nFunction"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("portotype"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("call")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("content"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),t._v("args")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    content"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("fn "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" result "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" content"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("fn")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),t._v("args"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    content"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("fn "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" result\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\nFunction"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("portotype"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("apply")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("content "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" window"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" args "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    content"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("fn "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" result "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" content"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("fn")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),t._v("args"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    content"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("fn "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" result\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\nFunction"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("portotype"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("bind")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("content "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" window"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),t._v("args")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("fn")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),t._v("local")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("instanceof")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("fn")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n          content "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("apply")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("content"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" args"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("concat")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("local"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        content"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("fn "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" result\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    fn"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("portotype "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Object"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("create")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("portotype"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" fn\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n")])])]),s("h3",{attrs:{id:"js内存"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#js内存"}},[t._v("#")]),t._v(" js内存")]),t._v(" "),s("h3",{attrs:{id:"讲讲javascript垃圾回收是怎么做的？"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#讲讲javascript垃圾回收是怎么做的？"}},[t._v("#")]),t._v(" 讲讲JavaScript垃圾回收是怎么做的？")]),t._v(" "),s("p",[t._v("js对象 种类分为分新生代和老生代，新生代分配的攻坚比老生代小很多，新生代主要存储着很快不用的对象，老生代存储着长期存活的对象（window等），新生代的对象在多次回收中都没被回收，会晋升为老生代。变量那些数据会随着 执行上下文的销毁被回收。回收垃圾前，会对对象进行标记，从根对象往下遍历并标记，能遍历的为可达，不能遍历为不可达，之后会回收不可达的对象。")]),t._v(" "),s("h3",{attrs:{id:"javascript的基本类型和复杂类型是储存在哪⾥的？"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#javascript的基本类型和复杂类型是储存在哪⾥的？"}},[t._v("#")]),t._v(" JavaScript的基本类型和复杂类型是储存在哪⾥的？")]),t._v(" "),s("p",[t._v("基本类型存储在栈内存里面，复杂类型存储在堆内存")]),t._v(" "),s("h3",{attrs:{id:"异步"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#异步"}},[t._v("#")]),t._v(" 异步")]),t._v(" "),s("h3",{attrs:{id:"async-await-是什么？"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#async-await-是什么？"}},[t._v("#")]),t._v(" async/await 是什么？")]),t._v(" "),s("p",[t._v("async/await 是 promise的语法糖，允许 一组 promise 对象 按照一定顺序执行。")]),t._v(" "),s("ol",[s("li",[t._v("async声明一个异步函数")]),t._v(" "),s("li",[t._v("异步函数默认返回promise对象")]),t._v(" "),s("li",[t._v("异步函数内部执行到await时，会暂停当前执行上下文执行，直到promise 有返回结果")]),t._v(" "),s("li",[t._v("await 只能在异步函数使用")]),t._v(" "),s("li",[t._v("异步函数中所有的promise执行完成后，异步函数返回的promise对象才会执行then方法")])]),t._v(" "),s("p",[t._v("与promise的优势：\n解决回调地狱，以同步方式编写代码，代码更加优雅\n方便调试")]),t._v(" "),s("h3",{attrs:{id:"dom"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#dom"}},[t._v("#")]),t._v(" dom")]),t._v(" "),s("ul",[s("li",[t._v("DOM的事件模型是什么？\n脚本模型，内联模型，动态绑定")])]),t._v(" "),s("div",{staticClass:"language-html extra-class"},[s("pre",{pre:!0,attrs:{class:"language-html"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("\x3c!--⾏内绑定：脚本模型--\x3e")]),t._v(" \n"),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("button")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("onclick")]),s("span",{pre:!0,attrs:{class:"token attr-value"}},[s("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("javascrpt:alert("),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("'")]),t._v("Hello"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("'")]),t._v(")"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("Hello1"),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("button")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" \n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("\x3c!--内联模型--\x3e")]),t._v(" \n"),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("button")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("onclick")]),s("span",{pre:!0,attrs:{class:"token attr-value"}},[s("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("showHello()"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("Hello2"),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("button")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" \n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("\x3c!--动态绑定--\x3e")]),t._v(" \n"),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("button")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("id")]),s("span",{pre:!0,attrs:{class:"token attr-value"}},[s("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("btn3"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("Hello3"),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("button")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n")])])]),s("ul",[s("li",[t._v("DOM的事件流是什么？\n事件流又称为事件传播，指发生 行为交互时触发相应事件，触发时按照一定顺序传递事件。事件传播分为三个阶段，捕获阶段，目标阶段，冒泡阶段。当事件发生时，先触发，捕获事件，再触发目标事件，最后再触发冒泡事件，一直往上冒泡。")]),t._v(" "),s("li",[t._v("什么是事件委托?\n在元素的最外部元素统一绑定事件，最外部元素内部的任何元素无需绑定事件，只要触发事件，事件就会冒泡到最外部元素，执行绑定的事件。")])]),t._v(" "),s("ol",[s("li",[t._v("好处\n减少内存占用")]),t._v(" "),s("li",[t._v("坏处\nfocus、blur 之类的事件本身没有事件冒泡机制，所以⽆法委托\nmousemove、mouseout 这样的事件，虽然有事件冒泡，但是只能不断通过位置去计算定位，对性能消耗⾼，不适 合事件委托")])]),t._v(" "),s("h3",{attrs:{id:"bom"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#bom"}},[t._v("#")]),t._v(" bom")]),t._v(" "),s("h2",{attrs:{id:"css"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#css"}},[t._v("#")]),t._v(" css")]),t._v(" "),s("h3",{attrs:{id:"基础-2"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#基础-2"}},[t._v("#")]),t._v(" 基础")]),t._v(" "),s("h3",{attrs:{id:"css选择器的优先级是怎样的？✨"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#css选择器的优先级是怎样的？✨"}},[t._v("#")]),t._v(" CSS选择器的优先级是怎样的？✨")]),t._v(" "),s("p",[t._v("不同选择的优先级不一样。如果按优先级分类abcd,a包含行内样式（1），b包含id选择器，c包含类选择器，伪类和属性选择符个数（n）,d包含类型选择器和伪元素个数。abcd不同种类的选择器个数按照abcd顺序拼接，得到的值最大的，优先级最大")]),t._v(" "),s("ul",[s("li",[t._v("link和@import的区别？")])]),t._v(" "),s("p",[t._v("link：")]),t._v(" "),s("p",[t._v("import")]),t._v(" "),s("ol",[s("li",[t._v("增加请求数目\n（影响页面加载速率）")])]),t._v(" "),s("p",[t._v("建议会用link，尽量少用import")]),t._v(" "),s("ul",[s("li",[t._v("有哪些⽅式（CSS）可以隐藏⻚⾯元素？\ndisplay:none\nvisbility:hidden\nopacity: 0")]),t._v(" "),s("li",[t._v("em\\px\\rem区别？\n他们都会字体大小的单位。\npx是一个基础的单位，描述字体显示的大小\nem 是基于父级元素字体大小来计算，如父元素字体为12px，子元素1em，那么子元素字体大小就是(12 x 1 )px\nrem 是基于html字体大小来计算,同理em")])]),t._v(" "),s("h3",{attrs:{id:"块级元素⽔平居中的⽅法？"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#块级元素⽔平居中的⽅法？"}},[t._v("#")]),t._v(" 块级元素⽔平居中的⽅法？")]),t._v(" "),s("div",{staticClass:"language-css extra-class"},[s("pre",{pre:!0,attrs:{class:"language-css"}},[s("code",[t._v(" "),s("span",{pre:!0,attrs:{class:"token property"}},[t._v("margin")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" 0 auto"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n //浮动\n position：absolute\n\n left：50% - 自身宽度一半\n\n // 弹性盒子\n 父元素 "),s("span",{pre:!0,attrs:{class:"token property"}},[t._v("display")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" flex\n 子元素 align-items：center\n\n")])])]),s("ul",[s("li",[t._v("CSS有⼏种定位⽅式？")])]),t._v(" "),s("p",[t._v("3种。")]),t._v(" "),s("ol",[s("li",[t._v("static默认的。")]),t._v(" "),s("li",[t._v("absolute。参考包含块（position为非static）定位（top,left）,r如果没有可参考的position包含块，就以html根元素作为包含块参考。不占用原来空间")]),t._v(" "),s("li",[t._v("relative。参考原来的位置做偏移，偏移后仍占据原来的空间")]),t._v(" "),s("li",[t._v("fixed 相对于浏览器窗口进行定位。")])]),t._v(" "),s("ul",[s("li",[s("p",[t._v("如何理解z-index？✨\nz-index属性 控制 层叠上下文中层叠元素次序。\n层叠上下文中 不同元素 层叠顺序不一样。它们是按照这样的规则排序。z-index 为 负 positioned元素 > 非positioned block元素 > 非positioned float元素 >  非positioned inline元素 > positioned z-index为0或者auto的元素 > positioned (z-index > 1 )元素.z-index 控制 positioned元素离屏幕的距离（堆叠次序）")])]),t._v(" "),s("li",[s("p",[t._v("如何理解层叠上下⽂？✨\nz-index 不为auto的定位元素会在 一定 空间按照 堆叠次序 排序（里屏幕的距离），这个空间就叫做层叠上下文。z-index不为auto的定位元素、opacity小于1 的元素、ransform 属性值不为 none的元素、perspective 值不为 none 的元素都会创建自己的层叠上下文，层叠上下文的堆叠次序，不会影响外部的堆叠次序。")])]),t._v(" "),s("li",[s("p",[t._v("清除浮动有哪些⽅法？")])])]),t._v(" "),s("ol",[s("li",[t._v("给 父元素 添加伪元素")]),t._v(" "),s("li",[t._v("给父元素设置为BFC（块级格式化上下文），如：overflow 不是 visible元素、绝对定位元素、浮动元素、display为inline-block元素。")])]),t._v(" "),s("ul",[s("li",[t._v("你对css-sprites的理解")]),t._v(" "),s("li",[t._v("你对媒体查询的理解？")]),t._v(" "),s("li",[t._v("你对盒模型的理解？✨")]),t._v(" "),s("li",[t._v("标准盒模型和怪异盒模型有什么区别？✨")]),t._v(" "),s("li",[t._v("谈谈对BFC(Block Formatting Context)的理解？ ✨")]),t._v(" "),s("li",[t._v("为什么有时候⼈们⽤translate来改变位置⽽不是定位？")]),t._v(" "),s("li",[t._v("伪类和伪元素的区别是什么？")]),t._v(" "),s("li",[t._v("你对flex的理解？✨")]),t._v(" "),s("li",[t._v("关于CSS的动画与过渡问题")])]),t._v(" "),s("h2",{attrs:{id:"html"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#html"}},[t._v("#")]),t._v(" html")]),t._v(" "),s("h3",{attrs:{id:"基础-3"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#基础-3"}},[t._v("#")]),t._v(" 基础")]),t._v(" "),s("ul",[s("li",[t._v("doctype(⽂档类型) 的作⽤是什么？✨")]),t._v(" "),s("li",[t._v("这三种模式的区别是什么？(接上⼀问追问)")]),t._v(" "),s("li",[t._v("HTML、XML 和 XHTML 有什么区别？")]),t._v(" "),s("li",[t._v("什么是data-属性？")]),t._v(" "),s("li",[t._v("你对HTML语义化的理解？✨")]),t._v(" "),s("li",[t._v("HTML5与HTML4的不同之处")]),t._v(" "),s("li",[t._v("有哪些常⽤的meta标签？")]),t._v(" "),s("li",[t._v("src和href的区别？")]),t._v(" "),s("li",[t._v("知道img的srcset的作⽤是什么？（追问）")]),t._v(" "),s("li",[t._v("还有哪⼀个标签能起到跟srcset相似作⽤？（追问）")]),t._v(" "),s("li",[t._v("script标签中defer和async的区别？✨")]),t._v(" "),s("li",[t._v("有⼏种前端储存的⽅式？✨")]),t._v(" "),s("li",[t._v("这些⽅式的区别是什么？（追问）✨")])]),t._v(" "),s("h2",{attrs:{id:"http"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#http"}},[t._v("#")]),t._v(" http")]),t._v(" "),s("ul",[s("li",[t._v("HTTP有哪些⽅法？这些⽅法的具体作⽤是什么？")]),t._v(" "),s("li",[t._v("GET和POST有什么区别？")]),t._v(" "),s("li",[t._v("PUT和PATCH都是给服务器发送修改资源，有什么区别？")]),t._v(" "),s("li",[t._v("http的请求报⽂是什么样的？")]),t._v(" "),s("li",[t._v("聊⼀聊HTTP的部⾸有哪些？\n内容很多，重点看标『✨ 』内容")]),t._v(" "),s("li",[t._v("聊⼀聊HTTP的状态码有哪些？")]),t._v(" "),s("li",[t._v("HTTP的keep-alive是⼲什么的？")]),t._v(" "),s("li",[t._v("为什么有了HTTP为什么还要HTTPS？\nhttps是安全版的http，因为http协议的数据都是明⽂进⾏传输的，所以对于⼀些敏感信息的传输就很不安全，HTTPS就\n是为了解决HTTP的不安全⽽⽣的。")]),t._v(" "),s("li",[t._v("HTTPS是如何保证安全的？")]),t._v(" "),s("li",[t._v("但是问题来了，如果中间⼈篡改了证书，那么身份证明是不是就⽆效了？这个证明就⽩买了，这个时候需要⼀个新的技\n术，数字签名。")]),t._v(" "),s("li",[t._v("HTTP2相对于HTTP1.x有什么优势和特点？")]),t._v(" "),s("li",[t._v("服务器推送")]),t._v(" "),s("li",[t._v("多路复⽤")]),t._v(" "),s("li",[t._v("HTTP的缓存的过程是怎样的？")]),t._v(" "),s("li",[t._v("什么时候会触发强缓存或者协商缓存？")]),t._v(" "),s("li",[t._v("服务器判断缓存是否是新鲜的⽅法就是依靠HTTP的另外两组信息")]),t._v(" "),s("li",[t._v("响应头")]),t._v(" "),s("li",[t._v("http的整个流程，涉及tcp/ip协议")])]),t._v(" "),s("h2",{attrs:{id:"浏览器原理"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#浏览器原理"}},[t._v("#")]),t._v(" 浏览器原理")]),t._v(" "),s("ul",[s("li",[t._v("点击关注本公众号获取⽂档最新更新,并可以领取配套于本指南的 《前端⾯试⼿册》 以及最标准的简历模板.")]),t._v(" "),s("li",[t._v("常⻅的浏览器内核有哪些?")]),t._v(" "),s("li",[t._v("浏览器的主要组成部分是什么？")]),t._v(" "),s("li",[t._v("浏览器是如何渲染UI的？")]),t._v(" "),s("li",[t._v("浏览器如何解析css选择器？")]),t._v(" "),s("li",[t._v("DOM Tree是如何构建的？")]),t._v(" "),s("li",[t._v("浏览器重绘与重排的区别？")]),t._v(" "),s("li",[t._v("如何触发重排和重绘？")]),t._v(" "),s("li",[t._v("如何避免重绘或者重排？")]),t._v(" "),s("li",[t._v("前端如何实现即时通讯？")]),t._v(" "),s("li",[t._v("什么是浏览器同源策略？")]),t._v(" "),s("li",[t._v("如何实现跨域？\n"),s("a",{attrs:{href:"http://taligarsiel.com/Projects/howbrowserswork1.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("http://taligarsiel.com/Projects/howbrowserswork1.html"),s("OutboundLink")],1)])]),t._v(" "),s("h2",{attrs:{id:"算法基础"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#算法基础"}},[t._v("#")]),t._v(" 算法基础")]),t._v(" "),s("ul",[s("li",[t._v("选择排序")]),t._v(" "),s("li",[t._v("插入排序")]),t._v(" "),s("li",[t._v("希尔排序")]),t._v(" "),s("li",[t._v("归并排序")]),t._v(" "),s("li",[t._v("快速排序")]),t._v(" "),s("li",[t._v("二分查找")])]),t._v(" "),s("h2",{attrs:{id:"网络安全"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#网络安全"}},[t._v("#")]),t._v(" 网络安全")]),t._v(" "),s("ul",[s("li",[t._v("有哪些可能引起前端安全的的问题?")]),t._v(" "),s("li",[t._v("XSS分为哪⼏类?")]),t._v(" "),s("li",[t._v("如何预防XSS?")]),t._v(" "),s("li",[t._v("针对第⼀个要素：我们是否能够在⽤户输⼊的过程，过滤掉⽤户输⼊的恶意代码呢？")]),t._v(" "),s("li",[t._v("在⽤户提交时，由前端过滤输⼊，然后提交到后端。这样做是否可⾏呢？")]),t._v(" "),s("li",[t._v("那么，换⼀个过滤时机：后端在写⼊数据库前，对输⼊进⾏过滤，然后把“安全的”内容，返回给前端。这样是否可⾏")]),t._v(" "),s("li",[t._v("呢？")]),t._v(" "),s("li",[t._v("如何应对⽹络劫持?")]),t._v(" "),s("li",[t._v("HTTPS⼀定是安全的吗?")])]),t._v(" "),s("h2",{attrs:{id:"webpack"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#webpack"}},[t._v("#")]),t._v(" webpack")]),t._v(" "),s("ul",[s("li",[t._v("webpack与grunt、gulp的不同？")]),t._v(" "),s("li",[t._v("有哪些常⻅的Loader？")]),t._v(" "),s("li",[t._v("有哪些常⻅的Plugin？")]),t._v(" "),s("li",[t._v("Loader和Plugin的不同？")]),t._v(" "),s("li",[t._v("webpack的构建流程是什么?")]),t._v(" "),s("li",[t._v("是否写过Loader和Plugin？描述⼀下编写loader或plugin的思")]),t._v(" "),s("li",[t._v("路？")]),t._v(" "),s("li",[t._v("webpack的热更新是如何做到的？说明其原理？")]),t._v(" "),s("li",[t._v("如何⽤webpack来优化前端性能？")]),t._v(" "),s("li",[t._v("如何提⾼webpack的打包速度?")]),t._v(" "),s("li",[t._v("如何提⾼webpack的构建速度？")]),t._v(" "),s("li",[t._v("怎么配置单⻚应⽤？怎么配置多⻚应⽤？")])]),t._v(" "),s("h2",{attrs:{id:"vue"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#vue"}},[t._v("#")]),t._v(" Vue")]),t._v(" "),s("ul",[s("li",[t._v("你对MVVM的理解?")]),t._v(" "),s("li",[t._v("MVVM是什么?")]),t._v(" "),s("li",[t._v("MVVM的优缺点?")]),t._v(" "),s("li",[t._v("你对Vue⽣命周期的理解？")]),t._v(" "),s("li",[t._v("异步请求适合在哪个⽣命周期调⽤？")]),t._v(" "),s("li",[t._v("Vue组件如何通信？")]),t._v(" "),s("li",[t._v("computed和watch有什么区别?")]),t._v(" "),s("li",[t._v("Proxy与Object.defineProperty的优劣对⽐?")]),t._v(" "),s("li",[t._v("既然Vue通过数据劫持可以精准探测数据变化,为什么还需要虚拟")]),t._v(" "),s("li",[t._v("DOM进⾏diff检测差异?")]),t._v(" "),s("li",[t._v("Vue为什么没有类似于React中shouldComponentUpdate的⽣")]),t._v(" "),s("li",[t._v("命周期？")]),t._v(" "),s("li",[t._v("Vue中的key到底有什么⽤？")])]),t._v(" "),s("h2",{attrs:{id:"react"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#react"}},[t._v("#")]),t._v(" React")]),t._v(" "),s("ul",[s("li",[t._v("React最新的⽣命周期是怎样的?")]),t._v(" "),s("li",[t._v("React的请求应该放在哪个⽣命周期中?")]),t._v(" "),s("li",[t._v("setState到底是异步还是同步?")]),t._v(" "),s("li",[t._v("React组件通信如何实现?")]),t._v(" "),s("li",[t._v("React有哪些优化性能是⼿段?")]),t._v(" "),s("li",[t._v("React如何进⾏组件/逻辑复⽤?")]),t._v(" "),s("li",[t._v("mixin、hoc、render props、react-hooks的优劣如何？")]),t._v(" "),s("li",[t._v("你是如何理解fiber的?")]),t._v(" "),s("li",[t._v("你对 Time Slice的理解?")]),t._v(" "),s("li",[t._v("redux的⼯作流程?")]),t._v(" "),s("li",[t._v("react-redux是如何⼯作的?")]),t._v(" "),s("li",[t._v("redux与mobx的区别?")]),t._v(" "),s("li",[t._v("redux中如何进⾏异步操作?")]),t._v(" "),s("li",[t._v("redux异步中间件之间的优劣?")])])])}),[],!1,null,null,null);a.default=r.exports}}]);