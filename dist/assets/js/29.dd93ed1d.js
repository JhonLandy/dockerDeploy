(window.webpackJsonp=window.webpackJsonp||[]).push([[29],{563:function(v,_,l){"use strict";l.r(_);var e=l(31),i=Object(e.a)({},(function(){var v=this,_=v.$createElement,l=v._self._c||_;return l("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[l("h1",{attrs:{id:"算法与数据结构"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#算法与数据结构"}},[v._v("#")]),v._v(" 算法与数据结构")]),v._v(" "),l("ul",[l("li",[l("p",[v._v("数据结构")]),v._v(" "),l("ul",[l("li",[v._v("列表")]),v._v(" "),l("li",[v._v("队列（先进先出）")]),v._v(" "),l("li",[v._v("栈（后进显出）")]),v._v(" "),l("li",[v._v("散列\n"),l("ul",[l("li",[v._v("是一个数组，通过key找到数组下标index找到值（如java的HashMap）")])])]),v._v(" "),l("li",[v._v("链表")]),v._v(" "),l("li",[v._v("二叉树")]),v._v(" "),l("li",[v._v("字典（key-value键值对）")]),v._v(" "),l("li",[v._v("图（地图搜索，把某个地点标记为一个点）")])])]),v._v(" "),l("li",[l("p",[v._v("基础排序算法")]),v._v(" "),l("ul",[l("li",[l("p",[v._v("冒泡排序（")]),v._v(" "),l("p",[v._v("从一组数据找出最大或最小，然后在剩下的数据找出最大或最小以此类推")])]),v._v(" "),l("li",[l("p",[v._v("插入排序")]),v._v(" "),l("p",[v._v("它的工作原理是通过构建有序序列，对于未排序数据，在已排序序列中从后向前扫描，找到相应位置并插入")])]),v._v(" "),l("li",[l("p",[v._v("选择排序")]),v._v(" "),l("p",[v._v("首先在未排序序列中找到最小（大）元素，存放到排序序列的起始位置，然后，再从剩余未排序元素中继续寻找最小（大）元素，然后放到已排序序列的末尾。以此类推，直到所有元素均排序完毕。")])]),v._v(" "),l("li")])]),v._v(" "),l("li",[l("p",[v._v("高级排序算法")]),v._v(" "),l("ul",[l("li",[l("p",[v._v("归并排序")]),v._v(" "),l("p",[v._v("先分成两组并分别在排好序，把排好序的两组进行排序")])]),v._v(" "),l("li",[l("p",[v._v("快速排序")]),v._v(" "),l("p",[v._v("默认选择第一个为基数（一般情况），从右边读取，找到比他小的，把值付给基数位置，然后再从左边读取，找到比它大的，把值赋给右边读到的位置，右边读取到的位置等于左边读取到的位置。排好后，再继续左右两按照这个方法，以此类推")])]),v._v(" "),l("li",[l("p",[v._v("希尔排序")]),v._v(" "),l("p",[v._v("希尔排序是把记录按下标的一定增量分组，对每组使用直接插入排序算法排序；随着增量逐渐减少，每组包含的关键词越来越多，当增量减至1时，整个文件恰被分成一组，"),l("a",{attrs:{href:"https://baike.baidu.com/item/%E7%AE%97%E6%B3%95/209025",target:"_blank",rel:"noopener noreferrer"}},[v._v("算法"),l("OutboundLink")],1),v._v("便终止。")]),v._v(" "),l("p",[l("img",{attrs:{src:"C:%5CUsers%5Cgame-netease%5CDesktop%5Cdbb44aed2e738bd4423393fead8b87d6267ff9eb.jpg",alt:"dbb44aed2e738bd4423393fead8b87d6267ff9eb"}})])])])]),v._v(" "),l("li",[l("p",[v._v("检索算法")]),v._v(" "),l("ul",[l("li",[l("p",[v._v("顺序查找")]),v._v(" "),l("p",[v._v("对于查找数据，最简单的方法就是从列表的第一个元素开始对列表元素逐个进行判断，直到找到了想要的结果，或者直到列表结尾也没有找到。这种方法称为顺序查找，有时也被称为线性查找。")])]),v._v(" "),l("li",[l("p",[v._v("二分查找")]),v._v(" "),l("p",[v._v("二分法查找，也称折半查找，是一种在有序数组中查找特定元素的搜索算法。查找过程可以分为以下步骤：")]),v._v(" "),l("ul",[l("li",[v._v("首先，从有序数组的中间的元素开始搜索，如果该元素正好是目标元素（即要查找的元素），则搜索过程结束，否则进行下一步。")]),v._v(" "),l("li",[v._v("如果目标元素大于或者小于中间元素，则在数组大于或小于中间元素的那一半区域查找，然后重复第一步的操作。")]),v._v(" "),l("li",[v._v("如果某一步数组为空，则表示找不到目标元素。")])])])])])])])}),[],!1,null,null,null);_.default=i.exports}}]);